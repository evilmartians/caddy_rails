{
  serve bin/rails s -p {{.BackendPort}}
  {{if .Debug}}debug{{end}}
  {{if .AccessLog}}log{{end}}
  https_port {{.HttpsPort}}
  http_port {{.HttpPort}}
  {{if .AnyCableEnable}}order anycable before reverse_proxy{{end}}
}

http://{{.HttpHost}}:{{.HttpPort}} {
  root * ./public
  @notStatic {
    not {
      file {
        try_files {path}
      }
    }
  }

  {{if .CompressionEnable}}
  encode gzip zstd
  {{end}}

  {{if .AnyCableEnable}}
  anycable {
      #log_level debug
      #redis_url redis://localhost:6379/5
      #http_broadcast_port 8090
  }
  {{end}}

  reverse_proxy @notStatic {
    to localhost:{{.BackendPort}}

    header_up X-Real-IP {remote_host}
    header_up X-Forwarded-Proto {scheme}
    header_up Access-Control-Allow-Origin *
    header_up Access-Control-Allow-Credentials true
    header_up Access-Control-Allow-Headers Cache-Control,Content-Type
    transport http {
      read_buffer 8192
    }
  }

  file_server
}

{{if .SSLDomain}}
https://{{if .SSLDomain}}{{.SSLDomain}}{{else}}{{.HttpHost}}{{end}} {
  tls internal
  root * ./public
  @notStatic {
    not {
      file {
        try_files {path}
      }
    }
  }

  {{if .CompressionEnable}}
  encode gzip zstd
  {{end}}

  {{if .AnyCableEnable}}
  anycable {
      #log_level debug
      #redis_url redis://localhost:6379/5
      #http_broadcast_port 8090
  }
  {{end}}

  reverse_proxy @notStatic {
    to localhost:{{.BackendPort}}

    header_up X-Real-IP {remote_host}
    header_up X-Forwarded-Proto {scheme}
    header_up Access-Control-Allow-Origin *
    header_up Access-Control-Allow-Credentials true
    header_up Access-Control-Allow-Headers Cache-Control,Content-Type
    transport http {
      read_buffer 8192
    }
  }

  file_server
}
{{end}}
